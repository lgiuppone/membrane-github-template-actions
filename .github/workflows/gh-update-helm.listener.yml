name: draft new release

on:
  workflow_call:
    inputs:
      GH_BRANCH:
        required: true
        type: string
      GH_ENV:
        required: true
        type: string
      IMAGE_VERSION:
        required: true
        type: string
      ARGOCD_URL:
        required: true
        type: string
      CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL:
        required: true
        type: string
      ARGOCD_DESTINATION_SERVER:
        required: true
        type: string
      GH_REPO_URL:
        required: true
        type: string
      ARGOCD_VAULT_PLUGIN_ENV:
        required: true
        type: string
      ARGOCD_APP_PROJECT:
        required: true
        type: string
      ARGOCD_DEST_NAMESPACE:
        required: true
        type: string
      SOLANA:
        required: true
        type: string
      BITCOIND:
        required: true
        type: string
      ETHEREUM:
        required: true
        type: string
      COMMON:
        required: true
        type: string

jobs:
  update-helm:
    name: "Update helm & push"
    runs-on: ubuntu-latest
    outputs:
      BRANCH_REF: ${{ steps.validate-branch.outputs.BRANCH_REF }}
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.GH_BRANCH }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: validate argocd-${{ inputs.GH_ENV }} branch exists
        continue-on-error: true
        id: validate-branch
        run: |
          echo "BRANCH_REF=$(git ls-remote --heads origin 'argocd-${{ inputs.GH_ENV }}')" >> $GITHUB_OUTPUT

      - name: Checkout argocd-${{ inputs.GH_ENV }} branch
        if: ${{ steps.validate-branch.outputs.BRANCH_REF != '' }}
        uses: actions/checkout@v3
        with:
          ref: argocd-${{ inputs.GH_ENV }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create argocd-${{ inputs.GH_ENV }} branch
        if: ${{ steps.validate-branch.outputs.BRANCH_REF == '' }}
        run: |
          git checkout -b argocd-${{ inputs.GH_ENV }} ${{ inputs.GH_BRANCH }}
          git status

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Merge from ${{ inputs.GH_BRANCH }}
        run: |
          git merge origin/${{ inputs.GH_BRANCH }} --strategy-option theirs

      - name: Upgrade Tag SOLANA
        uses: fjogeleit/yaml-update-action@main
        if: ${{ inputs.SOLANA == 'true' || inputs.COMMON == 'true' }}
        with:
          valueFile: ".infra/${{ inputs.GH_ENV }}/solana/values.yaml"
          propertyPath: solana.image.tag
          value: ${{ inputs.IMAGE_VERSION }}
          createPR: false
          commitChange: false
          message: "Upgrade SOLANA image tag to ${{ inputs.IMAGE_VERSION }} [skip ci]"

      - name: Upgrade Tag BITCOIND
        uses: fjogeleit/yaml-update-action@main
        if: ${{ inputs.BITCOIND == 'true' || inputs.COMMON == 'true' }}
        with:
          valueFile: ".infra/${{ inputs.GH_ENV }}/bitcoind/values.yaml"
          propertyPath: bitcoind.image.tag
          value: ${{ inputs.IMAGE_VERSION }}
          createPR: false
          commitChange: false
          message: "Upgrade BITCOIND image tag to ${{ inputs.IMAGE_VERSION }} [skip ci]"

      - name: Upgrade Tag ETHEREUM
        uses: fjogeleit/yaml-update-action@main
        if: ${{ inputs.ETHEREUM == 'true' || inputs.COMMON == 'true' }}
        with:
          valueFile: ".infra/${{ inputs.GH_ENV }}/ethereum/values.yaml"
          propertyPath: ethereum.image.tag
          value: ${{ inputs.IMAGE_VERSION }}
          createPR: false
          commitChange: false
          message: "Upgrade ETHEREUM image tag to ${{ inputs.IMAGE_VERSION }} [skip ci]"

      - name: Commit & Push changes
        id: make-commit
        run: |
          git add .
          export MESSAGE="${{ github.actor }} updated to commit $(echo ${{ github.sha }} | cut -c1-7)"
          if [ ${{ inputs.TG_ENV }} != develop ]; then
            export MESSAGE="$MESSAGE - ${{ inputs.IMAGE_VERSION }}"
          fi
          git commit --message "$MESSAGE"
          git push  --set-upstream origin argocd-${{ inputs.GH_ENV }}

  createAppInArgoCD:
    name: "Create App in ArgoCD"
    runs-on: [self-hosted, k8s]
    needs: update-helm
    container: ghcr.io/jodybro/argocd-cli:1.1.0
    steps:
      - name: Create solana app in argo
        if: ${{ needs.update-helm.outputs.BRANCH_REF == '' }}
        run: |
          echo "Login to argocd"
          argocd login --insecure --grpc-web --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} ${{ inputs.ARGOCD_URL }}
          echo "Creating app in argocd"
          argocd app create solana-${{ inputs.GH_ENV }} \
          --repo ${{ inputs.GH_REPO_URL }} \
          --revision argocd-${{ inputs.GH_ENV }} \
          --dest-server ${{ inputs.ARGOCD_DESTINATION_SERVER }} \
          --path .infra/${{ inputs.GH_ENV }}/solana/ \
          --config-management-plugin argocd-vault-plugin-helm-with-args-${{ inputs.ARGOCD_VAULT_PLUGIN_ENV }} \
          --sync-policy automated \
          --self-heal \
          --grpc-web \
          --project ${{ inputs.ARGOCD_APP_PROJECT }} \
          --dest-namespace ${{ inputs.ARGOCD_DEST_NAMESPACE }} \
          --annotations notifications.argoproj.io/subscribe.on-deployed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-health-degraded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-failed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-running.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-succeeded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }}
      - name: Create ethereum app in argo
        if: ${{ needs.update-helm.outputs.BRANCH_REF == '' }}
        run: |
          echo "Login to argocd"
          argocd login --insecure --grpc-web --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} ${{ inputs.ARGOCD_URL }}
          echo "Creating app in argocd"
          argocd app create ethereum-${{ inputs.GH_ENV }} \
          --repo ${{ inputs.GH_REPO_URL }} \
          --revision argocd-${{ inputs.GH_ENV }} \
          --dest-server ${{ inputs.ARGOCD_DESTINATION_SERVER }} \
          --path .infra/${{ inputs.GH_ENV }}/ethereum/ \
          --config-management-plugin argocd-vault-plugin-helm-with-args-${{ inputs.ARGOCD_VAULT_PLUGIN_ENV }} \
          --sync-policy automated \
          --self-heal \
          --grpc-web \
          --project ${{ inputs.ARGOCD_APP_PROJECT }} \
          --dest-namespace ${{ inputs.ARGOCD_DEST_NAMESPACE }} \
          --annotations notifications.argoproj.io/subscribe.on-deployed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-health-degraded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-failed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-running.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-succeeded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }}
      - name: Create bitcoind app in argo
        if: ${{ needs.update-helm.outputs.BRANCH_REF == '' }}
        run: |
          echo "Login to argocd"
          argocd login --insecure --grpc-web --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} ${{ inputs.ARGOCD_URL }}
          echo "Creating app in argocd"
          argocd app create bitcoind-${{ inputs.GH_ENV }} \
          --repo ${{ inputs.GH_REPO_URL }} \
          --revision argocd-${{ inputs.GH_ENV }} \
          --dest-server ${{ inputs.ARGOCD_DESTINATION_SERVER }} \
          --path .infra/${{ inputs.GH_ENV }}/bitcoind/ \
          --config-management-plugin argocd-vault-plugin-helm-with-args-${{ inputs.ARGOCD_VAULT_PLUGIN_ENV }} \
          --sync-policy automated \
          --self-heal \
          --grpc-web \
          --project ${{ inputs.ARGOCD_APP_PROJECT }} \
          --dest-namespace ${{ inputs.ARGOCD_DEST_NAMESPACE }} \
          --annotations notifications.argoproj.io/subscribe.on-deployed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-health-degraded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-failed.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-running.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }} \
          --annotations notifications.argoproj.io/subscribe.on-sync-succeeded.slack=${{ inputs.CRYPTOCENTRUS_NOTIFICATIONS_SLACK_CHANNEL }}
