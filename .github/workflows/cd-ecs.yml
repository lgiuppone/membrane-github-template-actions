name: Deploy to dev

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      TASK_DEFINITION:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      GH_BRANCH_NAME:
        required: true
        type: string
      GH_ENV:
        required: true
        type: string
      GH_PR_MERGED:
        required: true
        type: boolean
      GH_SHA:
        required: true
        type: string
      GH_REF:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string



    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
#      NEW_RELIC_ACCOUNT_ID:
#        required: true
#      NEW_RELIC_API_KEY:
        required: true
      SLACK_ALARMS_TOKEN:
        required: true
#      NEW_RELIC_APPLICATION_ID:
#        required: true

jobs:
  cd:
    if: ${{ inputs.GH_PR_MERGED }} 
    name: deploy to ${{ inputs.GH_ENV }} 
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: ${{ inputs.GH_ENV }} 
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 
    steps:
    
    - uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: ${{ inputs.SLACK_CHANNEL }}
        status: STARTED
        color: good
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}

    - name: Checkout
      uses: actions/checkout@v3
      with:
          ref: ${{ inputs.GH_BRANCH_NAME }} 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Use cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v1
      with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
  
    - name: Code build
      run: npm ci --ignore-scripts

    - name: Build, and tag Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ inputs.GH_SHA }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg NPM_TOKEN=${NPM_TOKEN}

    - name: Build, tag, and push image to Amazon ECR
      id: build-push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ inputs.GH_SHA }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . --build-arg NPM_TOKEN=${NPM_TOKEN}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.GH_SHA }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}          
          AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
   
    - name: Download task definition
      env:
          TASK_DEFINITION: ${{ inputs.TASK_DEFINITION }}
      run: |
        aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.CONTAINER_NAME }}
        image: ${{ steps.build-push-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ECS_SERVICE }}
        cluster: ${{ inputs.ECS_CLUSTER }}
        wait-for-service-stability: true

#    - name: Create New Relic deployment marker
#      uses: newrelic/deployment-marker-action@v1
#      continue-on-error: true
#      with:
#        accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
#        apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
#        applicationId: ${{ inputs.NEW_RELIC_APPLICATION_ID }}
#        revision: "${{ inputs.GH_REF }}-${{ inputs.GH_SHA }}"

    - name: Notify slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: ${{ inputs.SLACK_CHANNEL }}
        status: SUCCESS
        color: good

    - name: Notify slack fail
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: ${{ inputs.SLACK_CHANNEL }}
        status: FAILED
        color: danger
